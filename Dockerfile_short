FROM nvidia/cuda:11.6.2-cudnn8-devel-ubuntu20.04 AS base

ENV PATH="/root/miniconda3/bin:${PATH}"

# ARG LIBRS_VERSION
# # Make sure that we have a version number of librealsense as argument
# RUN test -n "$LIBRS_VERSION"


# Install wget to fetch Miniconda
RUN apt-get update && \
    apt-get install -y wget && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install Miniconda on x86 or ARM platforms
RUN arch=$(uname -m) && \
    if [ "$arch" = "x86_64" ]; then \
    MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh"; \
    elif [ "$arch" = "aarch64" ]; then \
    MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh"; \
    else \
    echo "Unsupported architecture: $arch"; \
    exit 1; \
    fi && \
    wget $MINICONDA_URL -O miniconda.sh && \
    mkdir -p /root/.conda && \
    bash miniconda.sh -b -p /root/miniconda3 && \
    rm -f miniconda.sh

ENV DEBIAN_FRONTEND=noninteractive 
RUN apt update && \
    apt-get install -y tcl --no-install-recommends
RUN apt update && \
    apt install -y build-essential ninja-build git cuda-toolkit-11-6

# Install ROS2
# Install necessary tools and dependencies
RUN apt-get update && \
    apt-get install -y \
    curl \
    gnupg2 \
    lsb-release \
    locales && \
    locale-gen en_US en_US.UTF-8 && \
    update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get update \
    && apt-get install -y \
    build-essential \
    cmake \
    git-all \
    software-properties-common \
    usbutils \
    libjpeg-dev \
    libpng-dev \
    && rm -rf /var/lib/apt/lists/*

RUN apt-get update && \
    apt-get install -y \
    libgl1-mesa-glx \
    x11-apps && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*


RUN apt-get update && \
    apt-get install -y xorg openbox tmux screen libglu1-mesa-dev freeglut3-dev mesa-common-dev mesa-utils


ENV USER=root
# Install XFCE, VNC server, dbus-x11, and xfonts-base
RUN apt-get update && apt-get install -y --no-install-recommends \
    xfce4 \
    xfce4-goodies \
    tigervnc-standalone-server \
    tigervnc-viewer \
    tigervnc-xorg-extension \
    tigervnc-common \
    dbus-x11 \
    xfonts-base \
    ubuntu-unity-desktop \
    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Setup VNC server
RUN mkdir /root/.vnc \
    && echo "password" | vncpasswd -f > /root/.vnc/passwd \
    && chmod 600 /root/.vnc/passwd

# Create an .Xauthority file
RUN touch /root/.Xauthority

# Set display resolution (change as needed)
ENV RESOLUTION=1920x1080

# Expose VNC port
EXPOSE 5901

# Copy a script to start the VNC server
COPY ./start_vnc.sh start_vnc.sh
RUN chmod +x start_vnc.sh

COPY . /MonoGS
WORKDIR /MonoGS
RUN conda init
# RUN conda create -n MonoGS python=3.7.13 && \
# conda activate MonoGS && \
# conda install -y pytorch==1.12.1 torchvision==0.13.1 torchaudio==0.12.1 pytorch-cuda=11.6 -c pytorch -c nvidia
RUN conda env create -f environment.yml
# Make RUN commands use the new environment:
RUN echo "conda activate MonoGS" >> ~/.bashrc
RUN echo "export MESA_GL_VERSION_OVERRIDE=4.5" >> ~/.bashrc
SHELL ["/bin/bash", "--login", "-c"]


ENTRYPOINT ["./ros_entrypoint.sh"]

# export LIBGL_ALWAYS_INDIRECT=0
# export MESA_GL_VERSION_OVERRIDE=4.5
# export MESA_GLSL_VERSION_OVERRIDE=450
# export LIBGL_ALWAYS_SOFTWARE=1
# ENTRYPOINT ["conda", "env", "update", "-f", "environment_1.yml"]
